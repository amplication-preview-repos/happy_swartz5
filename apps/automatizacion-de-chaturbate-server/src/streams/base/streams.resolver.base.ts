/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Streams } from "./Streams";
import { StreamsCountArgs } from "./StreamsCountArgs";
import { StreamsFindManyArgs } from "./StreamsFindManyArgs";
import { StreamsFindUniqueArgs } from "./StreamsFindUniqueArgs";
import { CreateStreamsArgs } from "./CreateStreamsArgs";
import { UpdateStreamsArgs } from "./UpdateStreamsArgs";
import { DeleteStreamsArgs } from "./DeleteStreamsArgs";
import { CommentsFindManyArgs } from "../../comments/base/CommentsFindManyArgs";
import { Comments } from "../../comments/base/Comments";
import { LikesFindManyArgs } from "../../likes/base/LikesFindManyArgs";
import { Likes } from "../../likes/base/Likes";
import { StreamsService } from "../streams.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Streams)
export class StreamsResolverBase {
  constructor(
    protected readonly service: StreamsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "any",
  })
  async _streamsItemsMeta(
    @graphql.Args() args: StreamsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Streams])
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "any",
  })
  async streamsItems(
    @graphql.Args() args: StreamsFindManyArgs
  ): Promise<Streams[]> {
    return this.service.streamsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Streams, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "own",
  })
  async streams(
    @graphql.Args() args: StreamsFindUniqueArgs
  ): Promise<Streams | null> {
    const result = await this.service.streams(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Streams)
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "create",
    possession: "any",
  })
  async createStreams(
    @graphql.Args() args: CreateStreamsArgs
  ): Promise<Streams> {
    return await this.service.createStreams({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Streams)
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async updateStreams(
    @graphql.Args() args: UpdateStreamsArgs
  ): Promise<Streams | null> {
    try {
      return await this.service.updateStreams({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Streams)
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "delete",
    possession: "any",
  })
  async deleteStreams(
    @graphql.Args() args: DeleteStreamsArgs
  ): Promise<Streams | null> {
    try {
      return await this.service.deleteStreams(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Comments], { name: "commentsItems" })
  @nestAccessControl.UseRoles({
    resource: "Comments",
    action: "read",
    possession: "any",
  })
  async findCommentsItems(
    @graphql.Parent() parent: Streams,
    @graphql.Args() args: CommentsFindManyArgs
  ): Promise<Comments[]> {
    const results = await this.service.findCommentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Likes], { name: "likesItems" })
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async findLikesItems(
    @graphql.Parent() parent: Streams,
    @graphql.Args() args: LikesFindManyArgs
  ): Promise<Likes[]> {
    const results = await this.service.findLikesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
