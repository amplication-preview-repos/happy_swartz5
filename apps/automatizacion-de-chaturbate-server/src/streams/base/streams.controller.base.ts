/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StreamsService } from "../streams.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StreamsCreateInput } from "./StreamsCreateInput";
import { Streams } from "./Streams";
import { StreamsFindManyArgs } from "./StreamsFindManyArgs";
import { StreamsWhereUniqueInput } from "./StreamsWhereUniqueInput";
import { StreamsUpdateInput } from "./StreamsUpdateInput";
import { CommentsFindManyArgs } from "../../comments/base/CommentsFindManyArgs";
import { Comments } from "../../comments/base/Comments";
import { CommentsWhereUniqueInput } from "../../comments/base/CommentsWhereUniqueInput";
import { LikesFindManyArgs } from "../../likes/base/LikesFindManyArgs";
import { Likes } from "../../likes/base/Likes";
import { LikesWhereUniqueInput } from "../../likes/base/LikesWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StreamsControllerBase {
  constructor(
    protected readonly service: StreamsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Streams })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createStreams(
    @common.Body() data: StreamsCreateInput
  ): Promise<Streams> {
    return await this.service.createStreams({
      data: data,
      select: {
        createdAt: true,
        id: true,
        streamKey: true,
        streamUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Streams] })
  @ApiNestedQuery(StreamsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async streamsItems(@common.Req() request: Request): Promise<Streams[]> {
    const args = plainToClass(StreamsFindManyArgs, request.query);
    return this.service.streamsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        streamKey: true,
        streamUrl: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Streams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async streams(
    @common.Param() params: StreamsWhereUniqueInput
  ): Promise<Streams | null> {
    const result = await this.service.streams({
      where: params,
      select: {
        createdAt: true,
        id: true,
        streamKey: true,
        streamUrl: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Streams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateStreams(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() data: StreamsUpdateInput
  ): Promise<Streams | null> {
    try {
      return await this.service.updateStreams({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          streamKey: true,
          streamUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Streams })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteStreams(
    @common.Param() params: StreamsWhereUniqueInput
  ): Promise<Streams | null> {
    try {
      return await this.service.deleteStreams({
        where: params,
        select: {
          createdAt: true,
          id: true,
          streamKey: true,
          streamUrl: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/commentsItems")
  @ApiNestedQuery(CommentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Comments",
    action: "read",
    possession: "any",
  })
  async findCommentsItems(
    @common.Req() request: Request,
    @common.Param() params: StreamsWhereUniqueInput
  ): Promise<Comments[]> {
    const query = plainToClass(CommentsFindManyArgs, request.query);
    const results = await this.service.findCommentsItems(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        stream: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async connectCommentsItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        connect: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async updateCommentsItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        set: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async disconnectCommentsItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/likesItems")
  @ApiNestedQuery(LikesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async findLikesItems(
    @common.Req() request: Request,
    @common.Param() params: StreamsWhereUniqueInput
  ): Promise<Likes[]> {
    const query = plainToClass(LikesFindManyArgs, request.query);
    const results = await this.service.findLikesItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        stream: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async connectLikesItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        connect: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async updateLikesItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        set: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/likesItems")
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "update",
    possession: "any",
  })
  async disconnectLikesItems(
    @common.Param() params: StreamsWhereUniqueInput,
    @common.Body() body: LikesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      likesItems: {
        disconnect: body,
      },
    };
    await this.service.updateStreams({
      where: params,
      data,
      select: { id: true },
    });
  }
}
