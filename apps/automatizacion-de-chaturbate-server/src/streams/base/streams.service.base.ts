/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Streams as PrismaStreams,
  Comments as PrismaComments,
  Likes as PrismaLikes,
} from "@prisma/client";

export class StreamsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StreamsCountArgs, "select">): Promise<number> {
    return this.prisma.streams.count(args);
  }

  async streamsItems(
    args: Prisma.StreamsFindManyArgs
  ): Promise<PrismaStreams[]> {
    return this.prisma.streams.findMany(args);
  }
  async streams(
    args: Prisma.StreamsFindUniqueArgs
  ): Promise<PrismaStreams | null> {
    return this.prisma.streams.findUnique(args);
  }
  async createStreams(args: Prisma.StreamsCreateArgs): Promise<PrismaStreams> {
    return this.prisma.streams.create(args);
  }
  async updateStreams(args: Prisma.StreamsUpdateArgs): Promise<PrismaStreams> {
    return this.prisma.streams.update(args);
  }
  async deleteStreams(args: Prisma.StreamsDeleteArgs): Promise<PrismaStreams> {
    return this.prisma.streams.delete(args);
  }

  async findCommentsItems(
    parentId: string,
    args: Prisma.CommentsFindManyArgs
  ): Promise<PrismaComments[]> {
    return this.prisma.streams
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .commentsItems(args);
  }

  async findLikesItems(
    parentId: string,
    args: Prisma.LikesFindManyArgs
  ): Promise<PrismaLikes[]> {
    return this.prisma.streams
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .likesItems(args);
  }
}
