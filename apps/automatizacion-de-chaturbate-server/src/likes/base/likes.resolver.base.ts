/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Likes } from "./Likes";
import { LikesCountArgs } from "./LikesCountArgs";
import { LikesFindManyArgs } from "./LikesFindManyArgs";
import { LikesFindUniqueArgs } from "./LikesFindUniqueArgs";
import { CreateLikesArgs } from "./CreateLikesArgs";
import { UpdateLikesArgs } from "./UpdateLikesArgs";
import { DeleteLikesArgs } from "./DeleteLikesArgs";
import { Streams } from "../../streams/base/Streams";
import { User } from "../../user/base/User";
import { LikesService } from "../likes.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Likes)
export class LikesResolverBase {
  constructor(
    protected readonly service: LikesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async _likesItemsMeta(
    @graphql.Args() args: LikesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Likes])
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async likesItems(@graphql.Args() args: LikesFindManyArgs): Promise<Likes[]> {
    return this.service.likesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Likes, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "own",
  })
  async likes(
    @graphql.Args() args: LikesFindUniqueArgs
  ): Promise<Likes | null> {
    const result = await this.service.likes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Likes)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "create",
    possession: "any",
  })
  async createLikes(@graphql.Args() args: CreateLikesArgs): Promise<Likes> {
    return await this.service.createLikes({
      ...args,
      data: {
        ...args.data,

        stream: args.data.stream
          ? {
              connect: args.data.stream,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Likes)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "update",
    possession: "any",
  })
  async updateLikes(
    @graphql.Args() args: UpdateLikesArgs
  ): Promise<Likes | null> {
    try {
      return await this.service.updateLikes({
        ...args,
        data: {
          ...args.data,

          stream: args.data.stream
            ? {
                connect: args.data.stream,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Likes)
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "delete",
    possession: "any",
  })
  async deleteLikes(
    @graphql.Args() args: DeleteLikesArgs
  ): Promise<Likes | null> {
    try {
      return await this.service.deleteLikes(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Streams, {
    nullable: true,
    name: "stream",
  })
  @nestAccessControl.UseRoles({
    resource: "Streams",
    action: "read",
    possession: "any",
  })
  async getStream(@graphql.Parent() parent: Likes): Promise<Streams | null> {
    const result = await this.service.getStream(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Likes): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
