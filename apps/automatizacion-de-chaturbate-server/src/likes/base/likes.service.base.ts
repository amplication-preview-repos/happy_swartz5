/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Likes as PrismaLikes,
  Streams as PrismaStreams,
  User as PrismaUser,
} from "@prisma/client";

export class LikesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LikesCountArgs, "select">): Promise<number> {
    return this.prisma.likes.count(args);
  }

  async likesItems(args: Prisma.LikesFindManyArgs): Promise<PrismaLikes[]> {
    return this.prisma.likes.findMany(args);
  }
  async likes(args: Prisma.LikesFindUniqueArgs): Promise<PrismaLikes | null> {
    return this.prisma.likes.findUnique(args);
  }
  async createLikes(args: Prisma.LikesCreateArgs): Promise<PrismaLikes> {
    return this.prisma.likes.create(args);
  }
  async updateLikes(args: Prisma.LikesUpdateArgs): Promise<PrismaLikes> {
    return this.prisma.likes.update(args);
  }
  async deleteLikes(args: Prisma.LikesDeleteArgs): Promise<PrismaLikes> {
    return this.prisma.likes.delete(args);
  }

  async getStream(parentId: string): Promise<PrismaStreams | null> {
    return this.prisma.likes
      .findUnique({
        where: { id: parentId },
      })
      .stream();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.likes
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
