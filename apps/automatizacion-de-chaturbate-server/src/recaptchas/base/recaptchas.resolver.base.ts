/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Recaptchas } from "./Recaptchas";
import { RecaptchasCountArgs } from "./RecaptchasCountArgs";
import { RecaptchasFindManyArgs } from "./RecaptchasFindManyArgs";
import { RecaptchasFindUniqueArgs } from "./RecaptchasFindUniqueArgs";
import { CreateRecaptchasArgs } from "./CreateRecaptchasArgs";
import { UpdateRecaptchasArgs } from "./UpdateRecaptchasArgs";
import { DeleteRecaptchasArgs } from "./DeleteRecaptchasArgs";
import { RecaptchasService } from "../recaptchas.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Recaptchas)
export class RecaptchasResolverBase {
  constructor(
    protected readonly service: RecaptchasService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "read",
    possession: "any",
  })
  async _recaptchasItemsMeta(
    @graphql.Args() args: RecaptchasCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Recaptchas])
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "read",
    possession: "any",
  })
  async recaptchasItems(
    @graphql.Args() args: RecaptchasFindManyArgs
  ): Promise<Recaptchas[]> {
    return this.service.recaptchasItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Recaptchas, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "read",
    possession: "own",
  })
  async recaptchas(
    @graphql.Args() args: RecaptchasFindUniqueArgs
  ): Promise<Recaptchas | null> {
    const result = await this.service.recaptchas(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recaptchas)
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "create",
    possession: "any",
  })
  async createRecaptchas(
    @graphql.Args() args: CreateRecaptchasArgs
  ): Promise<Recaptchas> {
    return await this.service.createRecaptchas({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Recaptchas)
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "update",
    possession: "any",
  })
  async updateRecaptchas(
    @graphql.Args() args: UpdateRecaptchasArgs
  ): Promise<Recaptchas | null> {
    try {
      return await this.service.updateRecaptchas({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Recaptchas)
  @nestAccessControl.UseRoles({
    resource: "Recaptchas",
    action: "delete",
    possession: "any",
  })
  async deleteRecaptchas(
    @graphql.Args() args: DeleteRecaptchasArgs
  ): Promise<Recaptchas | null> {
    try {
      return await this.service.deleteRecaptchas(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
