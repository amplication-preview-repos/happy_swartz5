/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SystemConfig as PrismaSystemConfig } from "@prisma/client";

export class SystemConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SystemConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.systemConfig.count(args);
  }

  async systemConfigs(
    args: Prisma.SystemConfigFindManyArgs
  ): Promise<PrismaSystemConfig[]> {
    return this.prisma.systemConfig.findMany(args);
  }
  async systemConfig(
    args: Prisma.SystemConfigFindUniqueArgs
  ): Promise<PrismaSystemConfig | null> {
    return this.prisma.systemConfig.findUnique(args);
  }
  async createSystemConfig(
    args: Prisma.SystemConfigCreateArgs
  ): Promise<PrismaSystemConfig> {
    return this.prisma.systemConfig.create(args);
  }
  async updateSystemConfig(
    args: Prisma.SystemConfigUpdateArgs
  ): Promise<PrismaSystemConfig> {
    return this.prisma.systemConfig.update(args);
  }
  async deleteSystemConfig(
    args: Prisma.SystemConfigDeleteArgs
  ): Promise<PrismaSystemConfig> {
    return this.prisma.systemConfig.delete(args);
  }
}
