/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Proxies } from "./Proxies";
import { ProxiesCountArgs } from "./ProxiesCountArgs";
import { ProxiesFindManyArgs } from "./ProxiesFindManyArgs";
import { ProxiesFindUniqueArgs } from "./ProxiesFindUniqueArgs";
import { CreateProxiesArgs } from "./CreateProxiesArgs";
import { UpdateProxiesArgs } from "./UpdateProxiesArgs";
import { DeleteProxiesArgs } from "./DeleteProxiesArgs";
import { ProxiesService } from "../proxies.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Proxies)
export class ProxiesResolverBase {
  constructor(
    protected readonly service: ProxiesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "read",
    possession: "any",
  })
  async _proxiesItemsMeta(
    @graphql.Args() args: ProxiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Proxies])
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "read",
    possession: "any",
  })
  async proxiesItems(
    @graphql.Args() args: ProxiesFindManyArgs
  ): Promise<Proxies[]> {
    return this.service.proxiesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Proxies, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "read",
    possession: "own",
  })
  async proxies(
    @graphql.Args() args: ProxiesFindUniqueArgs
  ): Promise<Proxies | null> {
    const result = await this.service.proxies(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Proxies)
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "create",
    possession: "any",
  })
  async createProxies(
    @graphql.Args() args: CreateProxiesArgs
  ): Promise<Proxies> {
    return await this.service.createProxies({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Proxies)
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "update",
    possession: "any",
  })
  async updateProxies(
    @graphql.Args() args: UpdateProxiesArgs
  ): Promise<Proxies | null> {
    try {
      return await this.service.updateProxies({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proxies)
  @nestAccessControl.UseRoles({
    resource: "Proxies",
    action: "delete",
    possession: "any",
  })
  async deleteProxies(
    @graphql.Args() args: DeleteProxiesArgs
  ): Promise<Proxies | null> {
    try {
      return await this.service.deleteProxies(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
